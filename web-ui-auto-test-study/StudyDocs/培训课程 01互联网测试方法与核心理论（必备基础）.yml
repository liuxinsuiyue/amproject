软件开发流程
  SCRUM、XP、持续集成/持续交付/DevOps
    【软件】与计算机系统操作有关的计算机程序，可能有的文件，文档及数据
    【软件开发流程的演变】
      传统瀑布模型->敏捷开发模型->DevOps开发模型
      【瀑布模型】线性，风险高，修改成本高；开发阶段清晰，流程好把控，适合需求稳定
         ==需求分析、设计（界面/开发）、编码、实现、软件测试、完成、维护
      【敏捷开发】XP/SCRUM 增量迭代、小步快跑
        ==XP 极限编程 开发：标准、结队编程 测试：测试驱动、持续集成（自动化） 适合小型项目，高标准团队 理想情况
        ==SCRUM 产品backlog（积压工作 商业价值优先级）、sprint 计划 sprintbacklog（迭代内容）、短的迭代周期（2-4周 每日站会 评审会议 回顾会议）、潜在可交付产品增量
          兴业用的是tfs管理
      【DevOps】是development 和operation的组合词，实际包括了开发、运维、测试三个之间的合作，紧密配合 自动化构建 使发布更频繁更可靠更快速
        DevOps生命周期
          持续开发 git svn等工具进行版本管理，提交仓库，后进行构建（ant/maven）
          持续测试 自动化测试工具 selenium（web） appium（APP）配合框架进行测试 java testng junit 、python unittest pytest
          持续集成 新代码测试通过后与现有代码进行集成 Jenkins 工具 将持续测试集成进去并出结果
          持续部署 只有持续集成结果是通过了的代码才进行持续部署 docker工具可以保证不同环境（test staging production）的一致
          持续监控 非常关键 线上监控提高软件质量和软件性能 可能还涉及运营团队的参与（监控用户行为 为后续的产品需求提供参考） ELK进行线上数据的存储查询分析
        DevOps对发布的影响
          减少变更的范围
          加强发布协调 用自动化来代替发布协调人，减少沟通成本
          自动化 比手动发布更可靠 不容易出错

      CI/CD 持续集成 持续交付
        CI 是一种软件开发实践及团队开发经常集成他们的工作，每次集成都通过自动化的构建（编译，发布，自动化测试）来验证 确定新代码和原有代码正确地集成在一起
        CD 是一种软件工程手法，让软件产品的产出过程在一个短周期内完成，软件保持在随时可发布的状态 减少开发成本与时间，减少风险
        与DevOps的关系
          DevOps的范围更广，是软件交付过程所涉及的各个团队之间的合作，是软件交付的过程自动化 是持续交付下的一个产物
          持续交付是一种持续交付的手段，关注点在将不同的过程集中起来，并且更快更频繁的执行这些过程 成果直接汇入DevOps模型
            例子：通过持续集成 自动化测试 在几个小时内完成产品开发上线 完成持续交付

项目管理与跨部门沟通协作  与产品经理、研发、上下游测试的配合
    项目管理
    跨部门沟通协作
    -与产品沟通
    -与开发沟通
    -上下游配合测试
  【项目流程】
    项目立项、产品定义、软件开发、软件测试、内部验收、用户验收、系统维护
    项目开发的各个阶段“软件开发、软件测试”
      ==需求分析、设计（开发概要设计+详细设计）、编码、单元测试、集成测试、系统测试
      ==过程管理思想
        项目管理过程、评审过程、软件监督与审核过程、软件配置管理过程、软件需求管理过程、变更控制规程、文档控制规程、文档开发与管  理规范
    角色
      项目经理、产品、研发、测试
    各阶段产出
      需求阶段：项目计划（大致时间规划）、需求文档
      设计阶段：项目计划（具体到各个功能）、系统说明书、概要设计+详细设计文档、测试计划+评审
      开发阶段（包含单元测试）：项目计划（更新进度）+项目报告进度、功能代码+单元测试代码、测试用例+评审
      集成测试阶段：项目报告进度、集成测试报告+部署测试环境、集成测试数据+集成测试用例
      系统测试阶段：项目报告进度、系统测试报告（执行报告）、缺陷报告

      项目管理方法：制定项目计划、执行计划并监控跟踪、项目风险应对与问题解决、项目收尾
  【跨部门沟通协作】
    与产品沟通（涉及需求问题）：需求评审会、在分析需求阶段、在测试用例编写阶段、在测试过程中
    与研发沟通（模块设计、bug）：在分析需求阶段、在测试用例编写阶段、在测试过程中，在线上监控发现bug时
  【上下游测试配合】
    测试计划沟通、环境对接（接口+联调环境）、熟悉业务（申请权限之类的）

测试流程体系	传统测试流程、测试左移、测试右移
  【软件测试基本概念】
    软件测试概念：通过手工或工具对被测对象进行测试；验证实际结果和预期结果之间是否存在差异
    软件测试作用：通过测试工作可以发现并修复软件当中存在的缺陷，从而提高用户对产品的使用信心。测试可以降低同类型产品开发遇到问题的风险。
    软件缺陷：会导致不能正常运行，它的存在会在一定程度上导致软件不能满足用户的需求，甚至可能破坏或泄露用户的重要数据
    软件测试原则：显示缺陷的存在，穷尽测试是不可能的，尽早介入，缺陷集群性（2/8原则）、杀虫剂悖论、测试活动依赖于测试内容、没有错误是谬论
    测试对象：
    --需求分析阶段：需求文档、接口文档
    --编码实现阶段：源代码
    --系统功能使用：软件程序
    测试用例：
      为特定的目的而设计的一组测试输入、执行步骤和预期的结果，以便测试产品是否满足某个特定需求的文档
  【软件测试模型】
    V模型：是瀑布模型的一种改进（单元测试、集成测试、系统测试、验收测试）；标明了测试过程中的不同阶段 （cmzhu:优点 各个层级的测试清晰 缺点有点像瀑布模型）
    W模型：明确表示出了测试与开发的并行关系；表示出测试伴随整个软件开发周期，并且测试的对象不只是程序，需求和设计同样要测试（测试开始前增加对各个阶段产出物的验证和相应测试阶段的设计，测试贯穿整个软件的生命周期，且除了代码要测试，需求、设计等都要测试。更早介入、测试与开发独立起来，并与开发并行 无法支持迭代的开发模型，对有些项目，开发过程中根本没有文档发生，故W模型无法使用。对于需求和设计的测试技术要求很高，实践起来很困难。）
    H模型：软件开发的需求、设计、编码等活动并非完全串行，更多的是迭代执行，把测试活动独立出来，形成独立流程，将测试准备活动和测试执行活动清晰地体现出来 “测试就绪点”指可以开始执行的时间点（优点：测试完全独立，贯穿这个生命周期，可并发 尽早准备 尽早执行，灵活  缺点：测试就绪点不好界定 不好分析，对项目组人员要求高 沟通成本也高）
  【软件测试工作流程】
    传统测试流程：单元测试、集成测试、冒烟测试（提测后验证基本功能）、系统测试、回归测试（修改代码后确认修改的正确性，没有引入新的错误；回归老功能的正确性）、验收测试
    系统测试工作流程：需求分析、测试计划、测试设计、用例评审、测试评审、测试执行、bug管理、验收测试，发布上线
  【测试左移和测试右移】
    如测试时间被压缩 导致的漏测
    充足的时间 为产品质量负责

    测试左移：左移是往测试之前的开发阶段移；测试团队测试在软件开发周期早期就开始介入；对代码进行测试；从发现bug到预防bug
    测试左移质量保障手段：代码评审（code review 开发内部，或测试人员做评审）、代码审计（偏自动化，如安全测试工具）、单元测试、自动化测试冒烟测试（测试人员提供脚本）、研发自测

    测试右移：往发布之后的阶段移，产品上线后进行线上监控，
    测试右移-线上监控
      闭环的线上问题反馈-检查-解决-更新流程
      更便捷的日志查看、回传服务；丰富有效的log,便于问题的快速定位；丰富的监控指标（例如业务异常点指标）；业务监控（例如短信发送等）；关键指标每日监控（服务器指标）；生产数据监控（警报）

测试技术体系	分层测试体系、单元测试、UI测试、接口测试、白盒测试
  【软件测试分类】
    按开发阶段分类：
      单元测试（最小的模块）、
      集成测试（模块集成）、
      系统测试【
        功能测试、
        兼容性测试（不同软硬件，不同厂商的设备）、
        性能测试（响应时间、系统资源CPU占用率内存使用情况、系统容量指最大并发用户数、长时间访问产品是否能正常运行）、
        安全测试（独立模块，网络协议，软件手段 各种注入xss攻击）】、
      验收测试（α测试测试人员在开发环境测 β测试公测 放在实际环境用户测试）
    是否查看代码分类：
      白盒测试（查看源代码）、
      黑盒测试(又称数据驱动测试，关注需求，输入输出 如功能性能测试)、
      灰盒测试（不详细，看一部分代码 如接口测试）
    测试执行方式分类：静态测试、动态测试（动态输入数据，）
    按是否手工执行划分：手工测试（不可替代-如新功能情况）、自动化测试（重复执行）
    其他分类：冒烟测试（基本功能开始之前 节省时间和人力成本）、回归测试（回归bug，及相关联，回归老功能）、随机测试（模拟用户，随机操作 发现隐蔽错误，放在最后，重要 重大bug的模块）、探索性测试（思维方式，强调人员的主观能动性，脱离计划和测试用例）
  【分层测试体系】
    自动化分层测试体系
    前端UI变化太快 脚本失效 维护成本很高
    敏捷 DevOps 又必须有自动化支持，所以需要做分层
      -10%用户界面测试 UI Tests （核心 逻辑简单 稳定功能才做）
      -20%服务测试 Service Tests 相对稳定的功能
      -70%单元测试 Unit Tests （快速，成本低 最强保障）

    百分比代表了工作量 对测试人的代码能力要求很高

  【单元测试】  最小模块的检查认证
    Java单元测试框架： Junit TestNG
    Python单元测试框架： unittest pytest
  【接口测试】
    接口全称 Application Programming interface API（是传递数据的桥梁）
    是针对软件对外提供服务的接口的输入输出进行测试 代价相对小一些
    检查接口参数传递的正确性，接口功能实现的正确性，输出结果的正确性，以及对各种异常情况的容错处理的完整性和合理性
    接口测试方法工具：
      Charles、Fiddler 代理工具 用来接口数据抓包
      postman 好用，接口测试 使用安装方便 受欢迎
      JMeter 接口功能、接口性能
      loadrunner 商业性性能测试工具 收费高 重
      python Requests库 HttpRunner框架 自己的接口测试框架 贴合业务 学习重点
      java HttpClient库 RestAssured框架自己的接口测试框架 贴合业务 学习重点
  【UI测试】
    测试产品前端功能 系统测试最重要的内容，方法：
    手工方法：人工查看、操作
    自动化方法：
      web：selenium 框架
      APP：appium 框架

常用测试平台	用例管理平台、Bug管理平台、代码管理平台、持续集成管理平台
  【常用的测试平台】
    测试用例管理平台与bug管理平台：两者经常协作所以通常是用同一个
    代码管理平台：代码分析构建 研发间协作
    流程管理平台：研发 测试 运维之间的协作
  【用例管理平台】
    jira:推荐方案，定制性很强 （产品研发测试运维 中大型公司常用 有商业化支持 没有用例概念 所有东西都是一个个issue 事项/记录 三个付费插件Zephyr Xray TestManagerforjira可以支持用例管理）
    redmine:推荐方案，开源，活跃，定制性很强（个人中小公司方案 定制性最强 没有用例概念 所有东西都是一个个issue 事项 ）
    testlink:流行的测试用例管理平台，体验不太好（整体体验比较旧模式）
    其他：腾讯tapd、阿里云效、禅道(国产开源工具)、 gitlab、在线协作文裆（如 石墨 在线版excel）
    无协作模式：excel、思维导图
  【Bug管理平台】
    通常与用例管理平台一致
    测试用例、 bug都可以使用issue表达
    关联关系设定
    测试用例与bug的属性设定（类型 属性字段不一样 允许自定义字段）
  【代码管理平台】
    gitlab:可本地部署的git代码管理平台，行业标准，也可云端部署 使用度最高 开源 代码管理 分支管理 wiki 流程 与其他平台对接接口 api 重要功能需要重点学习
    subversion: svn管理，已经过时
    github: 开源项目运作，不适合企业（私有）不能本地部署
    bitbucket:与jira同属一家公司 altassian，体验很好
  【持续集成管理平台】
    jenkins:持续集成与持续交付的主流平台 （插件非常完善强大）
    gitlab runner: gitlab的持续交付方案
    github action: github的开源方案
    自建devops平台：企业定制平台，腾讯 tapd（tencent agile product development）、阿里云效等

  【Jenkins完成持续集成与持续交付】
    研发
      构建、单元测试+覆盖率分析
      自动化代码审计（静态分析 sonar介入）
      运维：自动化部署
    测试
      接口测试
      UI自动化测试
      专项测试自动化
      性能测试、安全测试


黑盒测试方法论	边界值、等价类、因果图、探索式测试等
  【等价类划分】单个条件
    输入域明确，把输入域划分成若干子集
    分类：从每个部分选取少数代表性数据作为测试用例，每一类的代表性数据在测试中的作用等价于这一类中的其他值（少量数据验证）
    常见分类：
      有效等价类（符合《需求文档》  合理的数据集合）
      无效等价类（不符合《需求文档》不合理的数据集合）
    步骤：
      1、先确定有效和无效等价类
      2、有效等价类就是题目条件
      3、无效等价类先分与条件相反的情况，再找到特殊情况
    输入框等价类划分思路总结：需求的长度、类型、组成规则、是否为空、是否区分大小写、是否可以重复、是否去除空格
  【边界值分析】单个条件
    行业经验、基于对边界值处理的不严谨，所以作为重点测试数据
    是对等价类的补充 基本都是一起出现
    步骤：
      边界值确定：边界上的点；边界值两边的点（-1 +1）
      判断边界值属于有效还是无效等价类
      补充测试用例
  【探索式测试】是一个风格，不是一种测试方法
  【因果图】多个条件组合 产生多个动作 最终归为判定表 只是个辅助工具
    因果图是有向图.显示因果模型中变量之间的因果关系，因果图包括一组变量（或节点）每个节点通过箭头连接到—个或多个对其具有因果影响的其他节点。箭头描绘了因果关系的方向
    在软件测试中因果图是有向图，可以讲一组原因映射到一组结果。可以将原因视为程序的输入，而结果看成程序的输出，通常，该图在左侧显示代表原因的节点，在右侧显示代表影响的节点，他们之间可能存在中间节点，这些中间节点以AND和OR的逻辑运算符组合输入
    是一种利用图解法分析输入的各种组合情况，从而设计测试用例的方法，它适合于检查程序输入条件的各种组合情况
    特点：考虑输入条件的相互制约及组合关系；考虑输出条件对输入条件的依赖关系

    因-输入条件 关系
    果-输出结果 对原因的依赖
    步骤：
      找出所有输入条件编号，明确输入条件之间的制约关系及组合关系
      找出所有输出条件编号，明确输出条件之间的制约关系及组合关系
      找出什么样的输入条件组合会产生那种输出结果
      把因果图转换成判定表
      为判定表中的每一列表示的情况设计测试用例
  【判定表】 测试数据进行分类 组合
    一种表达因果关系的逻辑表达方式
    使用表格分类条件、中间结果、最终结果之间的关系
    判定表的组成：
      条件桩：问题的所有条件
      动作桩：问题的所有输出
      条件项：针对条件桩的取值
      动作项：条件项所有的各种取值情况下的输出结果
    判定表设计步骤
      1.列出所有的条件桩和动作桩
      2.确定规则数：条件取值个数^条件数
      3.填入条件项
      4.填入动作项。得到初始判定表
      5.简化判定表
  【决策树】流程图描述流程
    判定表也可以用决策树表示
    决策树比因果图和判定表更好
    可以用流程图标示决策树

  因果图、判定表、决策树（待深入学习）

    这三者本质一样用于表达流程关系，只是表现形式不同
    他们的含义其实就是编程逻辑if else switch
    测试过程中可以用流程图去表达
    黑盒的流程图与白盒的路径流程是存在关联关系的
  【探索式测试】
    强调个人测试者的个人自由和责任，以通过对待与测试相关的学习来不断优化其工作质量
    简单而言就是同步学习、测试设计和测试学习
    不用刻意去设计 通过上下文反馈 调整测试策略和执行
    属于黑盒测试技术 也可以应用于白盒的设计

    成本低，不用提前设计大量测试用例
    激发创造性，更快发现问题
    无法保障覆盖率
    多数都是结合脚本式用例来完成测试
  后续补充【错误推测法】 不太严谨的叫法
    。指利用感知觉和经验猜测出出错的可能类型，有针对性的列举出程序中所有可能的错误和容易发生错误的情况
    。列举出可能犯的错误和错误易发生的清单，然后根据清单编写测试用例；
    。这种方法很多程度是凭经验进行的

    最重要的是要思考和分析测试对象的各个方面，多参考以前发现的Bug的相关数据、总结的经验，个人多考虑异常 的情况、反面的情况、特殊的输入，以一个攻击者的态度对待程序，才能够设计出比较完善的测试用例 更多关注
  后续补充【场景法】适合涉及业务流程的业务，不适合验证单点功能
    场景法就是模拟用户操作软件时的场景，主要用于测试系统的业务流程
    用例场景定义：
      基本流（基本事件）：按照正确的业务流程来实现的一条操作路径（最简单的路径，一个业务仅存在一个基本流，且仅有一个起点和一个终点）
      备选流（分支事件）：导致程序出现错误的操作流程  可始于基本流/备选流，特定条件下执行，然后重新加入基本流，也可以不再加入到基本流中

    用例场景产生的背景：
      现在的软件几乎都是有事件触发来控制流程的
      事件触发时的情景便形成了场景
      同一个时间不同的触发顺序和处理结果形成事件流

    场景法的使用步骤如下:
      （1）分析需求，根据需求说明画出功能模块流程图，
      （2）根据流程图描述出程序的基本流及各项备选流
      （3）根据基本流和各项备选流生成不同的场景，构造场景列表
      （4）针对每一个场景生成相应的测试用例
      （5）重新审核生成的所有测试用例，把多余的测试用例去掉，
      （6）确定好每一个测试用例，并设计测试数据
  后续补充【正交法】
    使用最小的测试过程集合获得最大的测试覆盖率
    可能你的输入数据或者输入数据的组合数量很大，可采用这种方法减少测试用例
    局限性：只有几种，且要求每个控件中取值的个数要相等，实际很少是这种情况
    实际工作比较少使用

  测试方法的选择
    需要输入数据的地方，考虑采用等价类划分法，将无限测试变成有限测试。在任何情况下都必须采用边界值分析法
    关注它的主要功能和业务流程、业务逻辑是否正确实现，考虑使用场景法
    如果程序的功能说明中含有输人条件的组合情况，则一开始就应考虑选用因果图和判定表法
    对于参数配置类的软件,需要考虑参数之间的组合情况，考虑使用正交排列法选择较少的组合方式
    采用错误推断法再追加测试用例

白盒测试方法论	代码覆盖、流程覆盖、精准化测试
  【白盒测试的度量】
    根据待测产品的内部实现细节来设计测试用例
    白盒测试的执行手段是可以涵盖单元测试、集成测试
    使用代码覆盖率作为白盒测试的主要度量指标
  【代码覆盖率常见概念】
    。语句覆盖:每行代码都要覆盖至少一次（最基础，但很多错漏）
    。判定覆盖:判定表达式的真假至少覆盖一 次
    。判定/条件覆盖:判定覆盖与条件覆盖都必须覆盖
    。条件组合覆盖:判定表达式中的所有条件组合都需要覆盖
    。分支覆盖:控制流中的每条边都要被覆盖一 次
    。路径覆盖:所有的路径都要尽量覆盖（不同分支的组合）分支覆盖/路径全集=路径覆盖率
    。指令覆盖:一行代码会被编译为多条指令，尽可能的覆盖所有指令 。
    。方法覆盖:每个方法至少要被覆盖一次
    。类覆盖:每个类至少被覆盖一次
    上一级还有文件覆盖等
  举例：java覆盖率统计的工具
    emma
    cobertura
    jacoco 流行 已经是标准 重点（覆盖率报告）
  【流程覆盖】
    流程覆盖利用代码执行流代表流程
    流程覆盖用路径覆盖率表达
    对流程进行裁剪获得-一个适合业务的小规模的业务子集流程覆盖率=测试经过的路径/业务子集路径
  【精准化测试】
    。代码调用链与黑盒测试用例的关联
    。根据代码变更自动分析影响范围
    。黑盒测试过程中借助代码流程覆盖数据指导探索式测试
    。利用线上数据推导有效测试用例
    。代码流程分析与覆盖率统计

    难度高 依赖白盒 黑盒 没有开源工具 只有大厂自己的一些工具
测试经典书籍拆分讲解	全程软件测试、探索式测试、持续交付、Google测试之道、不测的秘密等
  【全程软件测试】出到第三版
    测试行业的经典书籍
    测试方法
    测试策略
    领域技术
    主流测试技术
    涵盖了软件测试的流程和方法体系
  【探索式测试】两本 理论+国内实践
    探索式测试的经典代表性书籍
    探索测试是业务测试和手工测试实践中的一个方法论
  【持续交付】
    持续交付的经典书籍
    现代化软件研发与测试的启蒙

    方法论和工具 非常全面现代化
  【Google测试之道】
    高级测试工程师和架构师必读
    讲解Google的测试策略和方法
    以及google对软件开发与测试的理解
  【不测的秘密】
    腾讯TMQ出品
    精准化测试代表性书籍
    开启精准化测试潮流
    黑白结合 高效测试 思路方法论

★实战|测试用例设计实战	测试需求评审、业务流程分析、测试用例设计实战
  【需求评审】
    业务场景角度：
      1、用户场景在需求中是否都能找到对应描述
      2、是否有明确的流程图
    功能点角度：
      1、数据约束是否全面 、合理
      2、存在分支的逻辑、描述是否覆盖所有路径
      3、多状态流程，状态流转描述是否合理且完善
      4、权限描述是否明确
    项目角度：
      1、需求优先级
      2、是否有deadline
      3、外部系统对接人确认
    系统交互角度：
      1、划分系统边界
      2、新方案对系统原有设计侵入式评估
      3、改动必要性，改动量评估
  【测试计划步骤】
    明确测试范围
      1、非本模块内容的不需要测试
      2、网页其他元素不包含在测试范围内
    明确功能点
      1、入口检查
      2、页面元素
    明确业务流程
      1、依据业务处理流程图
    明确输出结果
      1、成功 提示信息、返回的页面、信息展示
      2、失败 提示信息、返回的页面
    分析异常流程
      1、不填写内容，直接保存
      2、不填写必填项，点保存
      3、输入框中输入不符合要求的内容
      4、输入重复信息
      5、输入已存在的成员
      6、断网点击保存
      7、弱网点击保存
    预估测试需要的时间和资源
      1、编写测试用例 h
      2、测试执行 人h
      3、第一轮
      4、第二轮==
  【测试计划作用】
    方便宏观调控，进行相应资源配置
    方便了解整个项目测试情况以及项目测试不同阶段的所要进行的工作
  【测试计划编写要点】
    5W+H原则
    why:为什么要进行这些测试
    what:测试哪些方面，不同阶段的工作内容
    when:测试不同阶段的起止时间
    where:相应文档，缺陷的存放位置，测试环境等
    who:项目有关人员组成，安排哪些测试人员进行测试
    how:如何去做，使用哪些测试工具以及测试方法进行测试
  【测试计划】
    项目概述、测试目标、测试范围和重点（功能、兼容、性能、安全）、测试策略、项目里程碑、测试资源（人员、环境）、风险列表
    备注：冒烟测试是为了保证正向基本功能

  【测试用例的概念】测什么？怎么测？
    为特定的目的而设计的一组测试输入、执行步骤和预期的结果，以便测试产品是否满足某个特定需求的文档
    通过大量的测试用例来检验软件的运行效果
    它是指导测试工作进行的依据
  【测试用例的作用】
    指导测试的实施
    规划测试数据的准备
    编写测试脚本的"设计规格说明书"
    评估测试结果的度量基准
    分析缺陷的标准
  【测试用例的组成】
    用例编号、模块、测试点、前提条件、测试步骤、期望结果、实际结果（优先级、执行人、备注等）
    【优先级】    根据重要型分成一定的等级
      P0冒烟测试（主流程，最基本）
      P1高优先级（ 基本功能+重要异常）
      P2（中级 异常、边界、UI测试、网络验证） P3（低优先级 性能、压力、兼容性、安全、易用方面的） 有限资源和时间下先测最重要的
  【测试用例设计】
    设计步骤：
      1、划分功能模块
      2、正向功能验证 --相当于冒烟测试
      3、单个功能项验证--正向、异常、各个方面
      4、功能之间交互验证--场景（一系列的操作）、组合
      5、隐形需求
    设计工具：xmind （tab新建子，回车新建兄弟（后），shift回车新建兄弟（前））、excel
    测试点范例“输入正确的手机号，正确的密码，点击登录按钮，登录成功” 可以很快转成测试用例
    用例：
      1、功能
        前提条件（登录等）、正向功能验证（输入必须的并提交操作）、入口（不同地方的入口显示-位置图标文案，和操作点击-跳转 热区）、界面1（界面展示-UI文案，和操作-控件字段（输入框 见右侧 下拉框- 单选框 其他 ）按钮，）、界面2、界面3、场景、隐性需求
      2、UI
        切换窗口大小，将窗口缩小后，页面是否按比例缩小或出现滚动条用关条
      3、链接测试
        未登录，访问添加成员url,不显示添加成员界面
        在添加成员界面点击页面中其他链接，可以正确跳转到对应页面
      4、兼容性测试
      5、性能测试
      6、安全性
  【测试用例评审】
    测试用例的本身的描述是否清晰，是否存在二义性
    测试用例内容是否正确，是否与需求目标相-致
    测试用例的期望结果是否确定、唯一
    测试用例是否覆盖了所有的需求
    测试用例是否具有可执行性
    是否从用户层面来设计用户使用场景和业务流程的测试用例
    场景测试用例是否覆盖最复杂的业务流程
    用例设计是否包含了正面、反面的用例
  【web测试用例总结】
    见xmind
    面试测试用例设计 见E:\学习\测试培训-霍格沃斯\面试测试用例设计.png
      面试测试用例设计思路
        需求分析
        界面
        功能
        易用性
        兼容性
        性能
        安全性
    输入项设计要点：数据长度验证、数据类型验证、是否必填验证、限制约束验证
      必填项：默认文案展示正确；
      点击光标高亮展示在输入框内、默认文案消失；
      长度验证（等价、边界）；
      空格验证（前加空格、后加空格，前后加空格，中间空格，单独空格）；
      特殊字符验证
      唯一性
      隐性需求：表单是否支持tab键、表单是否支持回车键、表单输入框是否支持复制黏贴、点击浏览器刷新，页面刷新，
  F12
    Elements 查看网页源代码 （手工/自动化测试）
    Console 控制台可以调试js
    Sources 资源 可以对js进行断点调试 开发人员用的比较多
    Network 抓到发起请求-响应数据的所有数据（手工测试）
    Performance 用来分析运行时的性能
    Memory 存储 用于监控内存的使用情况
    Application 用于显示网站加载的所有的资源信息（缓存在这边可以看）
    Security 安全 HTTPS场景下可以查看安全信息
    Lighthouse 也是性能工具
    缓存：监控客户端和服务器之间的传输 相同url就读缓存 提高效率 减少网络传输
    Disable cache就是禁用缓存
    清空缓存并硬性重新加载
  【功能测试】
    bug定位
      前端问题：查看源码 network F12
        ---F12 Elements 定位元素、编辑元素、编辑元素样式（Styles）
      通过网络数据定位：抓取网络数据分析 （请求对响应错-后端 响应对显示错-前端） F12
        ---F12 Network （最常用 打开面板后再操作网页才能抓到数据 分为五部分：功能、资源过滤、资源过滤时间线、资源列表、总状态） ：记录网络活动 清除缓存、模拟网络（断网、弱网 通过下拉可以限制）、查看网络数据（资源名称、完整路径、状态码、资源类型、解释请求是哪个文件发起、资源大小、开始请求到结束的时间、请求的步骤和时间清晰的展示；点击资源名称（shift+鼠标移动可以查看请求依赖关系）（右键可以拷贝成cURL命令-请求  HAR加载资源的时间和内容 给其他软件解析 或用作接口测试）可以查看更多信息包括http请求头信息、预览、响应的数据(常用) 请求来源、时间、所有coockie ）、搜索网络数据、筛选资源（搜索功能可以过滤资源名称（如输入Cache-Control 可以过滤出网页有没有使用缓存；输入文件格式可以过滤资源 格式前加-符号就是取反））、资源排序（如查那些资源最耗时 右键可以更改配置表头的字段 点击字段排序）、阻止请求（页面某些资源不能用看是否影响页面整体外观 ctrl+shift +p  block中输入要阻止的文件名）。
      后台错误：分析日志 （shell）
  【兼容性测试】
    -浏览器兼容 （推荐自动化测试方式）（内核不一致）更主要
    -操作系统兼容（主流版本）
    -分辨率兼容
    工具：
  【性能分析】
    -
    -
    -
  【安全测试】
    -
    -
    -
  【测试总结】
    -
    -
    -
  测试用例的粒度
    测试用例可以写的很简单，也可以写的很复杂
    最简单的测试用例是测试的纲要，仅仅指出要测试的内容
    测试用例写的过于简单，则可能失去了测试用例的意义
    最复杂的测试用例则会指定输人的每项数据，期待的结果即检验方法，具体到界面元素的操作步骤，指定测试的方法和工具等
    测试用例写得过于复杂或详细，会带来两个问题:一个是效率问题，另一个是维护成本问题。另外，测试用例设计的过于详细，留给测试执行人员的思考空间就比较少，容易限制测试人员的思维。
  其他学员总结
    设计一个登录页面的用例（提供某个场景设计用例，重点！）
    a.功能测试：正确输入、为空输入、字符类型校验、长度校验、密码是否加密显示、大写提示、跳转页面是否成功、登出后用另一个账号登录
    b.UI：界面布局一致 合理、风格统一、界面文字简洁好理解、没有错别字
    c.性能测试：打开登录页面需要几秒、点击登录跳转首页需要几秒、多次点击、多人点击
    d.安全性：用户名和密码是否加密发送给服务器、错误登录的次数限制（防止暴力破解）、一台机器登录多个用户、一个用户多方登录、检查元素能否看到密码
    e.兼容性测试：不同浏览器、不同的平台（Windows、Mac）、移动设备能否工作
    f.易用性：输入框可否 tab 键切换、回车能否登录等