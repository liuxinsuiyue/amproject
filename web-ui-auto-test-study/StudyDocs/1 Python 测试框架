pytest测试
  pytest 自动化测试框架(一)     pytest 的基本用法
    简介
      1 成熟的全功能的Python测试工具，帮助您编写更好的程序
      2 与python自带的unittest测试框架类似，但pytest使用起来更简洁、高效；兼容unittest
      3 实用特性
        pytest 能够支持简单的单元测试和复杂的功能测试；
        结合Requests实现接口测试
        结合Selenium、Appium实现自动化功能测试
        结合Allure集成到Jenkins中实现持续集成（一般使用持续集成来完成代码集成到主干分支后的回归测试，通过自动化测试的手段来实现产品的快速迭代，同时保证产品的高质量）
        支持315种以上的插件
      4 参考网站：
        http://plugincompat.herokuapp.com/
        https://docs.pytest.org/

    安装
      pip install -U pytest
      查看版本
        pytest --version

    用例的识别与运行
      用例编写规范
        1 测试文件以 test_ 开头 或以 _test 结尾
        2 测试类以 Test 开头，并且不能带有init方法
        3 测试函数以 test_ 开头
        4 断言使用基本的assert即可

        范例：见 test_add.py
            在命令行进到文件所在路径 使用pytest命令 找到符合用例编写规范的文件，并在文件中收集符合编写规范的函数+类及方法，当做用例执行
            运行结果
              ..FF  其中 .代表用例通过，F代表用例未通过（断言错误 AsserttionError） 排查错误从下往上看错误日志，找到E（错误） 并找到报错的那一行代码

      运行参数 (可通过 pytest --help来查看帮助文档，下面介绍几种常用的参数)
        1 无参数   读取路径下所有符合规则的文件、类、方法、函数全部实行
          pytest
          py.test
        2 -v    打印详细日志信息，一般在调试时加上这个参数，终端会打印每一条用例的日志信息，方便定位问题
          pytest -v
        3 -s    带控制台输出结果，当你的代码里有print输出语句，想在运行结果中打印print输出的代码就可以添加参数，一般在调试时使用
          pytest -s
        4 -k    跳过运行某个或某些用例，场景：开发有一部分功能代码还未实现，测试人员已经完成测试用例设计；发现功能有bug，等修复后再测试这部分有缺陷的用例；
          pytest -k '类名'            只执行匹配类名所有类下的方法 范例 （pytest -k "TestClass"），个人实践结果类名要使用双引号，不然会报错
          pytest -k '方法名'            只执行匹配方法名的方法/函数 范例 （pytest -k "test_one"），个人实践结果方法名要使用双引号，不然会报错
          pytest -k '类名 and not 方法名'        运行类里所有的方法，不包括某个方法 范例（pytest -k "TestClass and not test_one"）
        5 -x    一旦遇到用例失败立即停止运行，场景：回归测试的10条基础用例，需要先运行这10条基础用例，全部通过后才提交测试人员正式测试，如果有一条用例失败，都将这个版本打回给开发人员。
          pytest -x
        6 --maxfail     用例失败个数达到阀值停止运行，注意这个参数前面有两个- 范例 （pytest -v -s --maxfail=3）场景：在回归测试过程中，假如一共有10条基础用例，当开发人员打完包提交测试的时候，如果运行过程中有 [num] 条用例失败，即中止运行，后面测试用例都放弃执行，直接退出。这时可以使用 --maxfail 参数。
          pytest -maxfail=[num]
        7 -m      将运行有@pytest.mark.[标记名]这个标记的测试用例
          pytest -m login
        其他
          pytest -n [num]     指定处理器进程数
          pytest --html=path/to/html/report.html

      运行模式
        指定某个模块    执行单独一个pytest模块， 应用场景：编写测试用例的时候，单独调试某个类，或者某个方法
          Pycharm 自带调试方式，符合规则的类/用例方法名前面都会标出绿色的执行按钮，点击这个按钮也能执行某个方法或者某个类。
              打开 Pycharm -> 设置 -> Tools -> Python Integrated Tools -> Testing: pytest
            （首次设置需要安装pytest（1、这个页面的提示点击fix安装；2、Project interpreter里添加pytest依赖包））
          pytest 命令行指定
            pytest 文件名.py             单独执行某个 Python 文件
            pytest 文件名.py::类名         单独执行某个文件中的类
            pytest 文件名.py::类名::方法名    单独执行类中的某个方法

    pytest 框架结构(范例：见 test_run_setup.py)
      与unittest类似，执行用例前会执行setup,teardown来增加用例的前置和后置条件。
      pytest框架中使用setup,teardown更灵活，按用例运行级别可分为以下几类：
        模块级 setup_module/teardown_module      在模块始末调用
        函数级 setup_function/teardown_function  在函数始末调用（在类外部）
        类级  setup_class/teardown_class         在类始末调用（在类中）
        方法级 setup_method/teardown_method       在方法始末调用（在类中）
        方法级 setup/teardown 与上面等价            在方法始末调用（在类中）
      调用顺序（个人理解function是另外的，没有的话 setup_function > teardown_function 就不列入）
        setup_module > setup_function > teardown_function > setup_class > setup_method > setup > teardown > teardown_method > teardown_class > teardown_module

    控制用例的执行顺序(范例：见 test_order.py)     应用场景：有时运行测试用例需要指定它的顺序，比如有些场景需要先运行完登录，才能执行后续的流程比如购物流程，下单流程，这时就需要指定测试用例的顺序。
      pytest加载所有的测试用例是乱序的，可以使用pytest-ordering插件（一定要装，否则不会按设置的顺序执行），在测试用例的方法前面加上装饰器 就可以指定用例的执行顺序
        @pytest.mark.run(order=[num])设置order的对应的num值，1 3 -3 -1 顺序执行 第1 第3 倒数第3 倒数第1
      安装
        pip install pytest-ordering

  pytest 自动化测试框架(二)       pytest 的其他实用特性和进阶技巧
    pytest fixtures(范例：见 test_fixture.py)
      方法前面加上装饰器，被装饰器装饰的方法的 方法名 可以作为一个参数传入到测试方法中。可以使用这种方法来完成测试之前的初始化，也可以返回数据给测试函数
        @pytest.fixture()
        应用场景：通常使用 setup 和 teardown 来进行资源的初始化。如果有这样一个场景，测试用例 1 需要依赖登录功能，测试用例 2 不需要登录功能，测试用例 3 需要登录功能。这种场景 setup，teardown 无法实现，可以使用 pytest fixture 功能，在方法前面加个 @pytest.fixture 装饰器，加了这个装饰器的方法可以以参数的形式传入到方法里面执行。
      指定范围内共享，通过scope参数可以控制fixture的作用范围，作用范围大小划分：session>module>class>function (范例：见 test_fixture_scope.py)
        @pytest.fixture(scope="module") 搭配yield (范例：见 text_fixture_scope.py)， 不写参数默认scope="function" scope与 yield组合相当于setup teardown
          具体作用范围如下：
            function 函数或方法级别都会被调用
            class    类级别调用一次
            module   模块级别调用一次
            session   是多个文件调用一次（可以跨.py文件调用，每个.py文件就是module）
        例如，整个模块有多条测试用例，需要在全部用例执行之前打开浏览器，全部执行完后关闭浏览器 ，打开和关闭操作只执行一次，如果每次都重新执行打开操作，会非常占用系统资源。 这种情况除了setup_module,teardown_module 还可以通过 @pytest.fixture(scope="module")搭配yield实现
          yield前面相当于setup_module 后面相当于teardown_module yield相当于return 用于唤醒teardown的执行，如果用例出现异常，不影响yield后面的teardown执行。
          当 scope='module' 时，在当前 .py 脚本里面所有的用例开始前只执行一次。
        @pytest.mark.userfixtures(方法名)，这个装饰器传入前置函数名作为参数

      confest.py文件(范例：见 test_scope 模块)
        @pytest.fixture(scope="session")  fixture scope为session级别可以跨.py模块调用，所以当我们有多个.py文件的用例时，如果只调用一次fixture，可以将scope='session'并且写到conftest.py文件里。
        执行过程中 pytest 会自动识别当前目录的 conftest.py，这个文件可以全局调用这里面的方法。
        规则：
          1 conftest.py 这个文件名是固定的不可以更改
          2 conftest.py与用例在同一个包下，并且该包有__init__.py文件
          3 不需要导入，pytest会自动识别
          4 放到项目的根目录下可以全局调用，放到某个package下，就在这个package下有效 当前目录以及所有子目录
        案例：
          在运行整个项目下的所有的用例，只执行一次打开浏览器。执行完所有的用例之后再执行关闭浏览器，可以在这个项目下创建一个 conftest.py 文件，将打开浏览器操作的方法放在这个文件下，并添加一个装饰器 @pytest.fixture(scope="session")，


      自动执行fixture(范例：见 test_autouse.py)
        如果每条用例都需要添加fixture功能，则需要在每个用例方法里面传入这个fixture的名字 这里就可以在装饰器里面添加一个参数auto="true",测试用例无需传入这个fixture的名字
        它会应用到所有的测试方法中，只是这里没有方法返回值给测试用例。
        @pytest.fixture(auto="true")  每个测试函数都会调用这个前置函数 (autouse默认为false)
        使用方法
          @pytest.fixture(autouse="true")
          def myfixture():
            print("this is my fixture")

      fixture传递参数(范例：见 test_fixture_params.py)
        测试过程需要大量的测试数据，如果每条测试数据都填写一条测试用例，用例数量将是非常庞大。一般在测试过程中会将测试用例用到的数据以参数的形式传入到测试用例中，并为每条测试数据生成一个测试结果数据
            在测试工作中使用这种参数化的方式，会减少大量的代码量，并且便于阅读与维护。
        @pytest.fixture(params=[1,2,3]) 定义params(列表)  对于params里面的每个值，fixture都会去调用执行一次
        def data(request):              定义装饰器方法， 并使用一个固定的参数名request来接收
            return request.param        使用request.param 来接收用例参数化的数据 将数据逐个传入到测试用例中

        def test_one(data):             方法名作为参数传递到测试用例中
            print(f"测试数据：{data}")
            assert data < 5


    多线程并行与分布式执行(pytest-xdist是pytest分布式测试插件)       多个人一起执行测试用例减少用例执行时间（并行测试 分布式的场景） 可以多个CPU 或主机执行
      安装
        pip install pytest-xdist
      使用------进程并发            ？？？UI自动化测试可以这样做吗 接口测试应该可以  ,插件是动态决定测试用例执行顺序的，为了保证各个测试能在各个独立线程里正确的执行，应该保证测试用例的独立性（这也符合测试用例设计的最佳实践）。
        pytest -n auto      自动检测系统的CPU核数 如果是4核，将并发4个进程
        pytest -n [num]     指定处理器进程数  CPU使用[num]个核来并发[num]个进程进行测试 （案例 pytest -n 4  指定4个CPU来并发执行）
      使用------主从分布式测试 类似master-worker  可以用来做UI自动化测试  参考网上文章"使用pytest-xdist实现分布式WebUI自动化测试"
        比较复杂，后续再学习

    结合pytest-html生成测试报告     报告为html格式
          测试报告通常在项目中尤为重要，报告可以体现测试人员的工作量，开发人员可以从测试报告中了解缺陷的情况，因此测试报告在测试过程中的地位至关重要，测试报告为纠正软件存在的质量问题提供依据，为软件验收和交付打下基础。测试报告根据内容的侧重点，可以分为 “版本测试报告” 和 “总结测试报告”。
      安装
        pip install pytest-html
      执行方法
        pytest --html=path/to/html/report.html   --self-contained-html    指定测试报告路径和名称   在html页面本地加载css样式（如果不添加 --self-contained-html 这个参数，生成报告的 CSS 文件是独立的，分享的时候容易千万数据丢失。）
      生成测试报告
        结合pytest-xdist使用
          pytest -v -s -n 3 --html=report.html --self-contained-html
        生成测试报告
          html内容包括标题、运行时间、环境、汇总结果以及用例的通过个数、跳过个数、失败个数、错误个数、期望失败个数、不期望通过格式、重新运行个数、以及错误的详细信息展示信息

    pytest框架assert断言使用（附）   编写代码时，我们经常会做出一些假设，断言就是用于在代码中捕捉这些假设。
                                  断言表示为一些布尔表达式，测试人员通常加一些断言来断定中间过程的正确性，如果没有断言就没办法判定用例中每一个测试步骤结果的正确性。在项目中适当的使用断言可以对代码的结构、属性、功能、安全性等场景检查与验证
                                  支持最常见的子表达式的值，包括调用，属性，比较以及二元和一元运算符。
                                  python使用assert（断言）用于判断一个表达式，在表达式条件为false的时候出发异常
      使用方法
        assert True     #断言为真
        assert not False    #断言为假
      案例
        assert "h" in "hello"
        assert 5 > 6
        assert not True   # 判断XX不为真
        assert {'0', '1', '3', '8'} == {'0', '3', '5', '8'} #判断两个字典相等

  Python 自动化测试(三):      pytest 参数化测试用例构建
    参数化用例           (范例：见 test_param.py)
      待测试的输入和输出是一组数据，可以把测试数据组织起来用不同的测试数据调用相同的测试方法    参数化就是把不同的参数写到一个集合里，程序自动取值运行用例，直到集合为空便结束

      pytest使用parametrize实现参数化
          @pytest.mark.parametrize
          使用方法：
            @pytest.mark.parametrize('data', param)       装饰测试方法。data 是自定义的参数名  param 是引入的参数列表(可以是由多个元素的数组组成的列表，此时'data'参数名 范例'test_input,expected')
            def test_func(data):                          将自定义的参数名data作为参数传给测试用例
              print(f"测试用例中使用data参数: {data}")          测试用例内部使用data参数
          parametrize( ) 方法源码：

            def parametrize(self,argnames, argvalues, indirect=False, ids=None, scope=None):
              主要参数说明
              argsnames ：参数名，是个字符串，如中间用逗号分隔则表示为多个参数名
              argsvalues ：参数值，参数组成的列表，列表中有几个元素，就会生成几条用例

      多次使用parametrize         多个parametrize的所有元素互相组合（类似笛卡尔乘积n*m），生成大量测试用例，实现全面的测试
        @pytest.mark.parametrize('x',[1,2])
        @pytest.mark.parametrize('y',[8,10,11])
        def test_foo(x,y):
          print(f"测试数据组合x: {x},y: {y}")

      @pytest.fixture 与 @pytest.mark.parametrize结合实现参数化     如果测试数据需要在fixture方法中使用，同时也需要在测试用例中使用,可以在使用parametrize的时候添加一个参数indirect=true,pytest可以将参数传入到fixture方法中，也可以在当前的测试用例中使用
        parametrize 源码：
          def parametrize(self,argnames, argvalues, indirect=False, ids=None, scope=None):
            indirect 参数设置为 True，pytest 会把 argnames 当作函数去执行，将 argvalues 作为参数传入到 argnames 这个函数里

        范例 indirect=True时，会将login_r作为参数，test_user_data被当做参数传入到login_r中，生成多个测试用例
          @pytest.fixture(scope="module")
          def login_r(request):

          @pytest.mark.parametrize("login_r", test_user_data,indirect=True)
          def test_login(login_r)

  Python 自动化测试(四)：    数据驱动
    数据驱动 (pytest结合YAML 范例：test_data文件夹 )
      在实际工作中，需要对多组不同的输入数据，进行通用的而测试操作步骤，以验证我们的软件。  自动化测试中比较好实现，只要实现了测试步骤，然后将多组数据以数据驱动的形式注入
          前面学习了参数化，当数据量非常大的时候，可以讲数据存放到外部文件中，使用的时候将文件中的数据读取出来，方便数据的管理。   数据和测试用例分别管理
          测试数据管理
            YAML      可读性高，用来表达数据序列化的格式
                      是一种容易阅读、适合表示程序语言的数据结构、可用于不同程序间交换数据、丰富的表达能力和可扩展性、易于使用的语言。通过缩进或符号来表示数据类型。
                      工作中常常使用YAML格式的文件存储测试数据 pyyaml模块用于处理yaml格式数据
              安装
                pip install PyYAML
              主要使用
                yaml.safe_dump()  python值转yaml格式数据
                yaml.safe_load()  yaml格式数据转python值
            Json
            Excel
            CSV

  Python 自动化测试(五):    Pytest 结合 Allure 生成测试报告
    结合allure生成测试报告(范例：范例：test_allure文件夹 百度搜索功能自动化测试 )
      测试报告：项目中至关重要的角色
          体现测试人员工作量
          开发人员了解缺陷的情况
          测试经理查看执行情况及用例的覆盖率
          项目负责人查看整个项目还余留的问题
      Allure框架  是一种灵活的、轻量级、支持多语言的测试报告工具，以web报告形式显示已测试的内容 同事允许参与开发过程的每个人从测试的日常执行中提取最大限度的有用信息。 支持多种语言 Java python JavaScript Rubby Groovy PHP .Net Scala
          安装
            mac
              brew install allure
            其他操作系统
              可参考相关文章。https://docs.qameta.io/allure/#_installing_a_commandline
            与pytest结合需要安装allure-pytest 插件
              pip install allure-pytest
          查看Allure版本
            allure --version
          运行
            1   pytest --alluredir=tmp/my_allure_results  执行测试时指定参数 --alluredir 选项及结果数据保存的目录     tmp/my_allure_results 中保存了本次测试的结果数据
            2   allure serve path/to/allure_results       打开报告，需要启动 allure 服务，在 terminal 中输入 allure serve [path/to/allure_results]
              或 allure generate ./result/ -o ./report/ --clean  使用 allure generate 生成 HTML 格式的测试结果报告，  ./result/ 目录下的测试数据生成HTML测试报告到 ./report 路径下 --clean 选项目的是先清空测试报告目录，再生成新的测试报告
                  allure open -h 127.0.0.1 -p 8883 ./report/      并使用 allure open 命令来打开报告   这个命令会启动一个 Web 服务将已经生成的测试报告打开。打开生成的测试报告，在默认的浏览器打开测试报告
          页面介绍（从不同的维度展示测试报告的其他信息）
            首页/总览 Overview
              展示了此次测试的运行时间、运行时长、测试用例数量以及成功用例、失败用例、通过用例的比例、 测试环境、SUITES、FEATURES BY STORIES 等基本信息。
              当与 Jenkins 做了持续置成后，TREND 区域还将显示，历次测试的通过情况。

            类别  Categories
            测试套 Suites      Allure 测试报告将每一个测试脚本，作为一个 Suite。
                              在首页里点击 Suites 区域内的任何一条 Suite，都会进入 Suites 页面
                                  Suites 页面的右侧将展示这条用例的详细执行情况。在这个页面可以看到测试用例的每个步骤，以及每个步骤的执行结果，包括步骤里面添加的链接、图片、网页片段或者视频作为重要信息的补充。
                                              在这里可以一目了在的看到用例失败的原因。
            图表  Graphs      展示了此次测试结果的统计信息，比如测试用例执行结果状态、测试用例重要等级分布、测试用例执行时间分布等；
            时间刻度  Timeline
            功能    Behaviors   按照 FEATURES 和 STORIES 展示测试用例的执行结果；
                            左侧：feature-story-title（没设的话默认是代码中用例名称+测试数据）-description（显示在右侧用例详情）
                            右侧：Severity（默认是normal） Duration耗时  Description Parameters（实际传入用例的值） Links（用例链接） 测试步骤（Execution）-step-两个参数/attach附件、 log stdout stderr
            包      Packages
          实际使用场景  前端自动化测试-百度搜索功能实战 （）
            在实际项目中，一旦用例报错，我们希望能够将当时应用的状态记录下来，记录这些状态的方式可以是日志、截图、视频等手段，并将这些记录在测试报告中，方便相关人员定位问题。我们基于 Pytest 与 Allure 结合生成测试报告来实现这个目标。
            以百度 Web 网页版本测试为例，
                百度首页呈现的功能：新闻、网页、贴吧、知道、音乐、图片、视频、地图等，我们以百度网页的搜索功能为例，使用 Allure、pytest 结合 Selenium 自动化测试框架，完成一个搜索功能的测试。
              范例代码解析：
                allure.testcase 用例标识，给定用例的链接，可以与用例的管理地址关联。
                allure.feature 功能模块划分，方便管理和运行测试用例。
                pytest.mark.parametrize 用来参数化测试用例。
                allure.step 用来添加测试步骤，在测试报告里面会展示出来这个步骤说明。
              执行
                pytest test_baidudemo.py -s -q --alluredir=./result/
                allure serve ./result/

            上面的测试报告展示运行时间，时长，用例数，通过率，以及测试套件 SUITES，环境等信息。
            点击左侧栏最下方的 Package 可以看到所有的测试用例以及测试数据，点击一条用例右侧会展示出用例的优先级，数据，测试步骤以及每个步骤的的名称及附加的图片等信息。这里添加了一个测试用例的链接，可以与测试用例的管理链接关联起来，方便后期统计覆盖率。
            另外，pytest 与 Allure 也可以与 Jenkins 集成，实现自动化测试的持续集成。

            补充：
              allure对用例的等级划分成五个等级 （默认是normal） @allure.severity(allure.severity_level.NORMAL)
                blocker　 阻塞缺陷（功能未实现，无法下一步）
                critical　　严重缺陷（功能点缺失）
                normal　　 一般缺陷（边界情况，格式错误）
                minor　 次要缺陷（界面错误与ui需求不符）
                trivial　　 轻微缺陷（必须项无提示，或者提示不规范）